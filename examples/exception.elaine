use std;

type Result[a, b] {
    Ok(a),
    Err(b),
}

effect Throw {
    throw(String) a
}

effect Exception! {
    throw(String) a
    catch!(a, a) a
}

let hThrow = handler {
    return(x) { if false { Err("") } else { Ok(x) } }
    throw(err) { Err(err) }
};

let eExc = elaboration Exception! -> <Throw> {
    catch!(x, y) {
        match handle[hThrow] x {
            Ok(a) => a,
            Err(s) => y
        }
    }
};

let safe_div = fn(x, y) <Throw> Int {
    if eq(y, 0) {
        throw("tried to divide by zero!")
    } else {
        div(x, y)
    }
};

let main = handle[hThrow] elab[eExc] {
    # Div by zero, returns 0
    let a = catch!(safe_div(3, 0), 0);
    
    # Div by zero, returns 8
    let b = catch!(safe_div(10, 0), 8);
    
    # Ok, returns 10/2 = 5
    let c = catch!(safe_div(10, 2), 4);
    add(a, add(b, c))
};
